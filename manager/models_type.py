import datetime
from manager.connection import SCHEMA_NAME

# class DBTable:
#     def __init__(self) -> None:
#         # send to all foreign keys the table name
#         print (self.__name__)

class _DBBasicType:
    create_string = ""
    base_type = None

    def make_type_string(self):
        return self.create_string

class DBInt(_DBBasicType):
    create_string = ""
    base_type = 'int'
    value = 0

    def __init__(self, default=0, not_null=False) -> None:
        self.value = default

        not_null = " NOT NULL" if not_null else " "

        self.create_string = f"int DEFAULT {default}{not_null}"
    
class DBVarchar(_DBBasicType):
    value = ""
    create_string = ""
    base_type = 'varchar'

    def __init__(self, default="", max_len=None, not_null=False) -> None:
        self.value = default
        
        the_type = "varchar" if max_len is None else f"varchar({max_len})"
        not_null = " NOT NULL" if not_null else " "

        self.create_string = f"{the_type} DEFAULT '{default}'{not_null}"

class DBMoney(_DBBasicType):
    create_string = ""
    value = 0
    base_type = 'money'

    def __init__(self, default=0, not_null=False) -> None:
        self.value = default

        not_null = " NOT NULL" if not_null else " "

        self.create_string = f"money DEFAULT {default} {not_null}"

class DBIntKey(_DBBasicType):
    create_string = ""
    value = 0
    base_type = 'int'

    def __init__(self, autogenerated=True) -> None:
        autogenerated = " GENERATED ALWAYS AS IDENTITY" if autogenerated else " NOT NULL"

        self.create_string = f"int{autogenerated} PRIMARY KEY"

class DBDate(_DBBasicType):
    create_string = ""
    value = 0
    base_type = 'date'

    def __init__(self, default=datetime.datetime.today(), not_null=False) -> None:
        self.value = default

        not_null = "NOT NULL" if not_null else " "
        default = default.strftime("%Y-%m-%d")

        self.create_string = f"date DEFAULT \'{default}\' {not_null}"

class DBForeignKey(_DBBasicType):
    create_string = ""

    def __init__(self, table:_DBBasicType, column:str) -> None:
        table_name = f"{SCHEMA_NAME}.{table.__name__}"

        # find column
        vals = vars(table)
        for val_name, val_value in vals.items():
            if val_name == column:
                assert issubclass(type(val_value), _DBBasicType), "the foreighn attribute most be a sub class of _DBBasicType"
                assert val_value.base_type is not None, "table basic_type most be not None"
                
                self.base_type = val_value.base_type

                self.create_string = f"{self.base_type} REFERENCES {table_name}({val_name})"